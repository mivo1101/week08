name: CI - Test, Build, (Push)

on:
  pull_request:
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
  push:
    branches: ['develop','main']
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  packages: write

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_backends
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref,'refs/heads/develop')))
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up QEMU and Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build & push product_service
        uses: docker/build-push-action@v4
        with:
          context: ./backend/product_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
            ${{ env.ACR_LOGIN_SERVER }}/product_service:latest
          cache-from: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/product_service:cache
          cache-to: type=inline

      - name: Build & push order_service
        uses: docker/build-push-action@v4
        with:
          context: ./backend/order_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}
            ${{ env.ACR_LOGIN_SERVER }}/order_service:latest
          cache-from: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/order_service:cache
          cache-to: type=inline

      - name: Build & push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}
            ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          cache-from: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/frontend:cache
          cache-to: type=inline

  trigger_deploy:
    name: Trigger backend CD (on main)
    runs-on: ubuntu-latest
    needs: build_and_push_images
    if: startsWith(github.ref, 'refs/heads/main') && github.event_name == 'push'
    uses: ./.github/workflows/backend-cd.yml
    with:
      aks_cluster_name: ${{ secrets.AKS_CLUSTER_NAME }}
      aks_resource_group: ${{ secrets.AKS_RESOURCE_GROUP }}
      aks_acr_name: ${{ secrets.ACR_NAME }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}



